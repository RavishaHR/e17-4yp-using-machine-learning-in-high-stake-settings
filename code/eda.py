# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Z4tEonlr-o6F_ArDq-ePDGDn-Vbw3iq
"""

# Importing libraries
import joblib
import sys
sys.modules['sklearn.externals.joblib'] = joblib
import os
import h5py
import json
import keras
import random
import imageio
import datetime
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
from keras import backend as K
from datetime import timedelta
import matplotlib.pyplot as plt

# Load the main dataset
from google.colab import drive
drive.mount('/content/drive')
data = pd.read_csv('/content/drive/Shareddrives/XAI/e17-4yp-xai/Dataset/DsDnsPrScTch.csv')
pd.set_option('display.max_columns', None)

# Drop the indicator column
data = data.drop(['Unnamed: 0'], axis=1)
# Checking for duplicate data
#data[data.duplicated()]

# Generating summary statistics
data[['Donation Amount', 'Donor Cart Sequence']].describe()

"""Projects dataset"""

from google.colab import drive
drive.mount('/content/drive')
# Group by Project ID and find other statistics
projects = pd.read_csv('/content/drive/Shareddrives/XAI/e17-4yp-xai/Dataset/Projects.csv').drop_duplicates()
# Generating summary statistics for quantitative columns
projects[['Teacher Project Posted Sequence', 'Project Cost']].describe()

projects.isnull().sum()

# Visualizing the variation of qualitative columns
pcs = projects['Project Current Status'].value_counts()
df2 = pd.DataFrame({'Current Status': pcs})
df2.plot.pie(y='Current Status', figsize=(10,10), autopct='%1.1f%%')

plt.clf()
plt.figure(figsize=(20,10))
ax = sns.countplot(x='Project Type', data=projects)

plt.clf()
plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
ax = sns.countplot(x='Project Subject Category Tree', data=projects)

plt.clf()
plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
ax = sns.countplot(x='Project Resource Category', data=projects)

plt.clf()
plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
ax = sns.countplot(x='Project Grade Level Category', data=projects)

plt.clf()
f, axes = plt.subplots(1, 2,figsize=(28,7))

a=0.05
q1 = projects["Project Cost"].quantile(a)
q3 = projects["Project Cost"].quantile(1-a)
mask = projects["Project Cost"].between(q1, q3, inclusive=True)
iqr = projects.loc[mask, "Project Cost"]
sns.distplot(iqr, ax=axes[0])

a=0.05
q1 = projects["Teacher Project Posted Sequence"].quantile(0)
q3 = projects["Teacher Project Posted Sequence"].quantile(1-a)
mask = projects["Teacher Project Posted Sequence"].between(q1, q3, inclusive=True)
iqr = projects.loc[mask, "Teacher Project Posted Sequence"]
sns.distplot(iqr, ax=axes[1])

"""Donations dataset"""

# Group by Project ID and find other statistics
donations = pd.read_csv('/content/drive/Shareddrives/XAI/e17-4yp-xai/Dataset/Donations.csv').drop_duplicates()
# Generating summary statistics for quantitative columns
donations[['Donation Amount', 'Donor Cart Sequence']].describe()

# Visualizing the variation of qualitative columns
df3 = pd.DataFrame({'Donation Included Optional Donation': donations['Donation Included Optional Donation'].value_counts()})
df3.plot.pie(y='Donation Included Optional Donation', figsize=(10,10), autopct='%1.1f%%')

plt.clf()
f, axes = plt.subplots(1, 2,figsize=(28,7))

a=0.0
q1 = donations["Donation Amount"].quantile(a)
q3 = donations["Donation Amount"].quantile(1-a)
mask = donations["Donation Amount"].between(q1, q3, inclusive=True)
iqr = donations.loc[mask, "Donation Amount"]
sns.distplot(iqr, ax=axes[0])

a=0.05
q1 = donations["Donation Amount"].quantile(a)
q3 = donations["Donation Amount"].quantile(1-a)
mask = donations["Donation Amount"].between(q1, q3, inclusive=True)
iqr = donations.loc[mask, "Donation Amount"]
sns.distplot(iqr, ax=axes[1])

plt.clf()
a=0.1
q1 = donations["Donor Cart Sequence"].quantile(0)
q3 = donations["Donor Cart Sequence"].quantile(1-a)
mask = donations["Donor Cart Sequence"].between(q1, q3, inclusive=True)
iqr = donations.loc[mask, "Donor Cart Sequence"]
sns.distplot(iqr)

"""Combined dataset"""

# Missing data
data.isnull().sum()

# Based on the projectâ€™s current status, sum the donation amounts for each project and display the distribution
plt.clf()
f, axes = plt.subplots(1, 3,figsize=(28,7))
a=0.01

df1 = data.loc[data['Project Current Status'] == 'Fully Funded']
df1 = df1.groupby('Project ID')['Donation Amount'].sum().reset_index()
q1 = df1["Donation Amount"].quantile(a)
q3 = df1["Donation Amount"].quantile(1-a)
mask = df1["Donation Amount"].between(q1, q3, inclusive=True)
iqr = df1.loc[mask, "Donation Amount"]
sns.distplot(iqr, ax=axes[0])

df2 = data.loc[data['Project Current Status'] == 'Live']
df2 = df2.groupby('Project ID')['Donation Amount'].sum().reset_index()
q1 = df2["Donation Amount"].quantile(a)
q3 = df2["Donation Amount"].quantile(1-a)
mask = df2["Donation Amount"].between(q1, q3, inclusive=True)
iqr = df2.loc[mask, "Donation Amount"]
sns.distplot(iqr, ax=axes[1])

df3 = data.loc[data['Project Current Status'] == 'Expired']
df3 = df3.groupby('Project ID')['Donation Amount'].sum().reset_index()
q1 = df3["Donation Amount"].quantile(a)
q3 = df3["Donation Amount"].quantile(1-a)
mask = df3["Donation Amount"].between(q1, q3, inclusive=True)
iqr = df3.loc[mask, "Donation Amount"]
sns.distplot(iqr, ax=axes[2])

# Top 10 states for donations
plt.clf()
fig, ax = plt.subplots(1, 1, figsize=[10, 5])
df4 = data.groupby('Donor State')['Donation Amount'].sum().sort_values(ascending=False).reset_index()[:10]
sns.barplot(y=df4['Donor State'], x=df4['Donation Amount'], palette=sns.color_palette('GnBu_d', 10), ax=ax)
ax.set_xlabel('Total Donation Amount ($)')

# To check whether there is only one Teacher ID associated with each unique Project ID
df5 = data[['Project ID', 'Teacher ID']].drop_duplicates()
df5 = df5.groupby('Project ID')['Teacher ID'].count().reset_index(name='Count')
df5[df5['Count'] > 1]

# Realtionship between projects and teachers
df6 = data[['Project ID', 'Teacher ID', 'Teacher Prefix', 'Project Cost', 'Project Current Status']].drop_duplicates()

a = 0.01
lower_value = df6['Project Cost'].quantile(a)
upper_value = df6['Project Cost'].quantile(1-a)
df6 = df6[(df6["Project Cost"] >= lower_value) & (df6["Project Cost"] < upper_value)]

plt.clf()
fig, ax = plt.subplots(1, 1, figsize=[10, 5])
sns.kdeplot(
   data=df6, x="Project Cost", hue="Teacher Prefix"
)

# Realtionship between projects and schools
df7 = data[['Project ID', 'School ID', 'Project Cost', 'School Percentage Free Lunch', 'School Metro Type']].drop_duplicates()

a = 0.01
lower_value = df7['Project Cost'].quantile(a)
upper_value = df7['Project Cost'].quantile(1-a)
df7 = df7[(df7["Project Cost"] >= lower_value) & (df7["Project Cost"] < upper_value)]

plt.clf()
fig, ax = plt.subplots(1, 2, figsize=[10, 5])
sns.kdeplot(
   data=df7, x="Project Cost", hue="School Metro Type", ax=ax[0]
)
sns.kdeplot(data=df7, x="School Percentage Free Lunch", ax=ax[1])

# Relationship between total donations and other parameters
df8 = data[['Project ID', 'Donation Amount', 'Teacher Prefix', 'School Metro Type']].drop_duplicates()
aggregations = {"Donation Amount": "sum",
                "Teacher Prefix": "max",
                "School Metro Type": "max"}
df8 = df8.groupby('Project ID').agg(aggregations)

# Filter by quantiles
a = 0.01
lower_value = df8['Donation Amount'].quantile(a)
upper_value = df8['Donation Amount'].quantile(1-a)
df8 = df8[(df8["Donation Amount"] >= lower_value) & (df8["Donation Amount"] < upper_value)]

plt.clf()
fig, ax = plt.subplots(1, 2, figsize=[20, 10])
sns.kdeplot(
   data=df8, x="Donation Amount", hue="School Metro Type", ax=ax[0]
)
sns.kdeplot(
   data=df8, x="Donation Amount", hue="Teacher Prefix", ax=ax[1]
)

plt.clf()
fig, ax = plt.subplots(1, 1, figsize=[20, 10])
sns.kdeplot(
   data=df8, x="Donation Amount",
   fill=True,
   alpha=.5, linewidth=0
)

# Relationship between School state and Donor state

# Time-based analysis
# Number of projects over the years
# Convert the date type to date-time objects
projects["Project Posted Date"]=pd.to_datetime(projects["Project Posted Date"])

# Number of projects created per month
projects["Project Posted Date"]=pd.to_datetime(projects["Project Posted Date"])
projects_per_month = projects.groupby(projects["Project Posted Date"].dt.to_period('M')).size()

plt.clf()
plt.figure(figsize=(10, 6))
projects_per_month.plot(kind='line', label='Number of Projects')
plt.legend()

# Number of projects over the years
projects_per_quarter = projects['Project Posted Date'].dt.to_period('Q').value_counts().sort_index()

# Plot the number of projects per quarter
plt.clf()
plt.figure(figsize=(10, 6))
projects_per_quarter.plot(kind='line')
plt.xlabel('Quarter')
plt.ylabel('Number of Projects')
plt.title('Seasonal Distribution of Projects')

data["Donation Received Date"]=pd.to_datetime(data["Donation Received Date"])
average_funding_amount_per_month = data.groupby(data["Donation Received Date"].dt.to_period('M'))["Donation Amount"].mean()

# Plot the number of projects per quarter
plt.clf()
plt.figure(figsize=(10, 6))
average_funding_amount_per_month.plot(kind='line', label='Average Funding Amount')
plt.xlabel('Donation Received Month')
plt.ylabel('Average Funding Amount')
plt.legend()



# Average project cost variation across months (quarterly)
projects["Project Posted Date"]=pd.to_datetime(projects["Project Posted Date"])
avg_project_cost_variation_per_month = projects.groupby(projects["Project Posted Date"].dt.to_period('M'))["Project Cost"].mean()

# Plot the number of projects per quarter
plt.clf()
plt.figure(figsize=(10, 6))
avg_project_cost_variation_per_month.plot(kind='line', label='Average Project Cost')
plt.xlabel('Project Posted Date')
plt.ylabel('Average Project Cost')
plt.legend()

# Average Donation Amount per project
data["Project Posted Date"]=pd.to_datetime(data["Project Posted Date"])
avg_donation_amount_per_project = data.groupby(data["Project Posted Date"].dt.to_period('M'))["Donation Amount"].mean()

# Plot the number of projects per quarter
plt.clf()
plt.figure(figsize=(10, 6))
avg_donation_amount_per_project.plot(kind='line', label='Average Donation Amount')
plt.xlabel('Project Posted Date')
plt.ylabel('Average Donation Amount')
plt.legend()

# Correlation analysis

# Text analysis